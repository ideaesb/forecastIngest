-- this needs to be run exactly once before loading data 

-- Sequence: hibernate_sequence...older versions of hibernate will look for this.

-- DROP SEQUENCE hibernate_sequence;

CREATE SEQUENCE hibernate_sequence
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 1
  CACHE 1;
ALTER TABLE hibernate_sequence
  OWNER TO postgres;

-- Type: "POINT"

-- DROP TYPE "POINT";

CREATE TYPE "point" AS ENUM
   ('STREAMFLOW',
    'RESERVOIR');
ALTER TYPE "point"
  OWNER TO postgres;

-- Type: "RIVER_FORECAST_CENTER"

-- DROP TYPE "RIVER_FORECAST_CENTER";

CREATE TYPE "river_forecast_center" AS ENUM
   ('COLORADO_BASIN',
    'NORTHWEST',
    'CALIFORNIA_NEVADA');
ALTER TYPE "river_forecast_center"
  OWNER TO postgres;
  
-- Type: "TIME_SERIES_TYPE"

-- DROP TYPE "TIME_SERIES_TYPE";

CREATE TYPE "time_series" AS ENUM
   ('ACCUMULATIVE',
    'INSTANTANEOUS',
    'MEAN');
ALTER TYPE "time_series"
  OWNER TO postgres;
  
  
-- Table: "LOCATION"

-- DROP TABLE location;

CREATE TABLE location
(
  id text NOT NULL, -- and NOT autogenerated, it will be filled with unique RFC IDs for streamflow points, reservoirs  
  station_name text,
  x real,
  y real,
  z real,
  point_type text,
  responsible_rfc text,
  CONSTRAINT location_pkey PRIMARY KEY (id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE location
  OWNER TO postgres;
  
-- Table: "ENSEMBLE"

-- DROP TABLE ensemble;

CREATE TABLE ensemble
(
  member integer NOT NULL,
  time_series_type text,
  CONSTRAINT ensemble_pkey PRIMARY KEY (member)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE ensemble
  OWNER TO postgres;
  
-- Table: "SIMULATION"

-- DROP TABLE simulation

CREATE TABLE simulation
(
  id bigserial NOT NULL, -- this will create sequence "SIMULATION_id_seq";
  simulation_date timestamp with time zone, -- "with time zone" means time stamp in database is always UTC
  start_date timestamp with time zone,  -- the application must specify timezone (or offset) at middle-tier
  end_date timestamp with time zone, -- post gres driver will convert that to UTC 
  time_step_multiplier integer,
  units text,
  CONSTRAINT simulation_pkey PRIMARY KEY (id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE simulation
  OWNER TO postgres;

-- Table: "FORECAST_EVENT"

-- DROP TABLE forecast_event

CREATE TABLE forecast_event
(
   id bigserial NOT NULL, -- this will create sequence "FORECAST_EVENT_id_seq";
   simulation_id bigint NOT NULL, -- foreign key naming convention follows 
   ensemble_member integer NOT NULL, -- org.springframework.boot.orm.jpa.hibernate.SpringNamingStrategy
   location_id text NOT NULL, -- whereby foreign key columns names are code as tablename_referenced column name.
   flow_data text, -- this is just a comma separated list of flows (to be exposed in JSON anyway i.e. text)
   -- flow_timestamp timestamp with time zone,
   -- flow_volume double precision,
   -- flag integer,
   -- flag_source text,
   -- comment text,
   -- user_name text,
   -- missing boolean,
   -- flow_volumes double precision [], -- current implementation of PostgreSQL (9.4) ignores any supplied array size limits, i.e., the behavior is the same as for arrays of unspecified length.
   CONSTRAINT forecast_event_pkey PRIMARY KEY (id),
   CONSTRAINT forecast_event_simulation_fk FOREIGN KEY (simulation_id)
   REFERENCES simulation (id) MATCH SIMPLE
   ON UPDATE CASCADE ON DELETE CASCADE, 
   CONSTRAINT forecast_event_ensemble_fk FOREIGN KEY (ensemble_member)
   REFERENCES ensemble (member) MATCH SIMPLE
   ON UPDATE CASCADE ON DELETE CASCADE,
   CONSTRAINT forecast_event_location_fk FOREIGN KEY (location_id)
   REFERENCES location (id) MATCH SIMPLE
   ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE forecast_event
  OWNER TO postgres;
  
-- Table: "EXCEEDANCE"

-- DROP TABLE exceedance

CREATE TABLE exceedance
(
   id bigserial NOT NULL, -- this will create sequence "EXCEEDANCE_id_seq";
   simulation_id bigint NOT NULL, -- foreign key naming convention follows 
   location_id text NOT NULL, -- whereby foreign key columns names are code as tablename_referenced column name.
   run_date timestamp with time zone,
   minimum double precision,
   percentile10 double precision,
   percentile30 double precision,
   period_average double precision,
   percentile50 double precision,
   percentile70 double precision,
   percentile90 double precision,
   maximum double precision,
   average double precision,
   observed double precision,
   CONSTRAINT exceedance_pkey PRIMARY KEY (id),
   CONSTRAINT exceedance_simulation_fk FOREIGN KEY (simulation_id)
   REFERENCES simulation (id) MATCH SIMPLE
   ON UPDATE CASCADE ON DELETE CASCADE, 
   CONSTRAINT exceedance_location_fk FOREIGN KEY (location_id)
   REFERENCES location (id) MATCH SIMPLE
   ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE exceedance
  OWNER TO postgres;

  SET TIME ZONE 'zulu';
  
